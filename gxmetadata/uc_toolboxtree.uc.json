{
	"Name": "UC_ToolboxTree",
	"Target": "",
	"IsControlType": false,
	"Template": "<div>	<style>        body, html {            margin: 0;            padding: 0;            width: 100%;            height: 100%;            overflow: hidden;            font-family: \'Segoe UI\', Tahoma, Geneva, Verdana, sans-serif;            color: #333;        }                #graph-container {            width: 100%;            height: 100vh;            background-color: #656F7A;            /* background-image: radial-gradient(#e9ecef 1px, transparent 1px); */            background-size: 20px 20px;        }                .node {            cursor: pointer;            transition: filter 0.3s;        }                .node:hover {            filter: drop-shadow(0 0 6px rgba(0, 123, 255, 0.5));        }                .node rect {            stroke: #6c757d;            stroke-width: 1.5px;            fill: #fff;            rx: 6px;            ry: 6px;            filter: drop-shadow(0 1px 3px rgba(0,0,0,0.12));            transition: fill 0.2s;        }                .node:hover rect {            fill: #f8f9fa;        }                .node text {            font-size: 12px;            text-anchor: middle;            dominant-baseline: middle;            pointer-events: none;            font-weight: 500;        }                .link {            fill: none;            stroke: #adb5bd;            stroke-width: 1.5px;            stroke-dasharray: 5, 5;            marker-end: url(#arrowhead);        }                .controls {            position: absolute;            top: 20px;            left: 20px;            z-index: 10;            background: rgba(255, 255, 255, 0.95);            padding: 15px;            border-radius: 8px;            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);            display: flex;            flex-direction: column;            gap: 8px;        }                .control-row {            display: flex;            gap: 8px;        }                button {            padding: 8px 12px;            border: none;            border-radius: 4px;            background: #f0f0f0;            color: #333;            font-weight: 500;            cursor: pointer;            transition: all 0.2s;            box-shadow: 0 1px 3px rgba(0,0,0,0.1);        }                button:hover {            background: #e0e0e0;            transform: translateY(-1px);        }                button:active {            transform: translateY(1px);        }                button.primary {            background: #0d6efd;            color: white;        }                button.primary:hover {            background: #0b5ed7;        }                .title {            margin: 0 0 10px 0;            font-size: 16px;            font-weight: 600;        }                .popover {            position: absolute;            padding: 15px;            background: white;            border-radius: 8px;            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);            z-index: 100;            max-width: 300px;            opacity: 0;            pointer-events: none;            transition: opacity 0.2s;        }                .popover.active {            opacity: 1;            pointer-events: all;        }                .popover h3 {            margin: 0 0 10px 0;            font-size: 16px;            padding-bottom: 8px;            border-bottom: 1px solid #e9ecef;        }                .popover .info-row {            display: flex;            margin-bottom: 8px;        }                .popover .label {            font-weight: 600;            min-width: 80px;        }                .popover .value {            flex: 1;        }                .popover .close {            position: absolute;            top: 10px;            right: 10px;            cursor: pointer;            font-size: 16px;            color: #adb5bd;        }                .popover .close:hover {            color: #495057;        }                .footer {            position: absolute;            bottom: 20px;            left: 20px;            font-size: 12px;            color: #6c757d;        }                .node-counter {            position: absolute;            bottom: 20px;            right: 20px;            background: rgba(255, 255, 255, 0.9);            padding: 8px 12px;            border-radius: 4px;            font-size: 12px;            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);        }    </style>	<div id=\"graph-container\"></div>        <div class=\"popover\" id=\"popover\">        <div class=\"close\" onclick=\"closePopover()\">Ã—</div>        <h3 id=\"popover-title\">Page Title</h3>        <div class=\"info-row\">            <div class=\"label\">ID:</div>            <div class=\"value\" id=\"popover-id\">1</div>        </div>        <div class=\"info-row\">            <div class=\"label\">Parent:</div>            <div class=\"value\" id=\"popover-parent\">None</div>        </div>        <div class=\"info-row\">            <div class=\"label\">Children:</div>            <div class=\"value\" id=\"popover-children\">3</div>        </div>        <div class=\"info-row\">            <div class=\"label\">Created:</div>            <div class=\"value\" id=\"popover-created\">2023-04-15</div>        </div>        <div class=\"info-row\">            <div class=\"label\">Status:</div>            <div class=\"value\" id=\"popover-status\">Active</div>        </div>    </div>        <div class=\"node-counter\">        Nodes: <span id=\"node-count\">0</span>    </div></div>", 
	"Events": [
	],
	"Properties": [
	],
	"Methods": {
		"Public": [
		],
		"Private": [
		]
	},
	"Scripts": {
		"AfterShow": [
			{
				"Name": "Start",
				"Source": "		// Extended sample data with additional properties        const sampleData =         {            \"pages\":             [                {\"id\": \"1\", \"title\": \"Home Page\", \"parentId\": null, \"status\": \"Published\", \"created\": \"2023-01-10\", \"lastModified\": \"2023-04-01\", \"views\": 12500},                {\"id\": \"2\", \"title\": \"Products\", \"parentId\": \"1\", \"status\": \"Published\", \"created\": \"2023-01-15\", \"lastModified\": \"2023-03-20\", \"views\": 8750},                {\"id\": \"3\", \"title\": \"Services\", \"parentId\": \"1\", \"status\": \"Published\", \"created\": \"2023-01-15\", \"lastModified\": \"2023-03-18\", \"views\": 7300},                {\"id\": \"4\", \"title\": \"About Us\", \"parentId\": \"1\", \"status\": \"Published\", \"created\": \"2023-01-12\", \"lastModified\": \"2023-02-28\", \"views\": 5200},                {\"id\": \"5\", \"title\": \"Product A\", \"parentId\": \"2\", \"status\": \"Published\", \"created\": \"2023-01-20\", \"lastModified\": \"2023-03-25\", \"views\": 4800},                {\"id\": \"6\", \"title\": \"Product B\", \"parentId\": \"2\", \"status\": \"Published\", \"created\": \"2023-01-22\", \"lastModified\": \"2023-03-27\", \"views\": 3650},                {\"id\": \"7\", \"title\": \"Service X\", \"parentId\": \"3\", \"status\": \"Published\", \"created\": \"2023-01-25\", \"lastModified\": \"2023-03-10\", \"views\": 2800},                {\"id\": \"8\", \"title\": \"Service Y\", \"parentId\": \"3\", \"status\": \"Draft\", \"created\": \"2023-01-27\", \"lastModified\": \"2023-03-15\", \"views\": 0},                {\"id\": \"9\", \"title\": \"Team\", \"parentId\": \"4\", \"status\": \"Published\", \"created\": \"2023-02-05\", \"lastModified\": \"2023-02-20\", \"views\": 1950},                {\"id\": \"10\", \"title\": \"History\", \"parentId\": \"4\", \"status\": \"Published\", \"created\": \"2023-02-08\", \"lastModified\": \"2023-02-25\", \"views\": 1200},                {\"id\": \"11\", \"title\": \"Team Member 1\", \"parentId\": \"9\", \"status\": \"Published\", \"created\": \"2023-02-10\", \"lastModified\": \"2023-02-22\", \"views\": 980},                {\"id\": \"12\", \"title\": \"Team Member 2\", \"parentId\": \"9\", \"status\": \"Published\", \"created\": \"2023-02-12\", \"lastModified\": \"2023-02-24\", \"views\": 850}            ]        };                // Function to convert flat data to hierarchical structure        function processData(data) {            const pages = data.pages;            const nodesMap = {};            const links = [];                        // Create nodes with additional properties            pages.forEach(page => {                nodesMap[page.id] = {                    id: page.id,                    title: page.title,                    parentId: page.parentId,                    status: page.status || \"Unknown\",                    created: page.created || \"N/A\",                    lastModified: page.lastModified || \"N/A\",                    views: page.views || 0,                    x: Math.random() * 800,                    y: Math.random() * 600,                    // Add derived properties                    children: []                };            });                        // Create links and populate children arrays            pages.forEach(page => {                if (page.parentId) {                    links.push({                        source: page.parentId,                        target: page.id                    });                                        // Add to parent\'s children array                    if (nodesMap[page.parentId]) {                        nodesMap[page.parentId].children.push(page.id);                    }                }            });                        return {                nodes: Object.values(nodesMap),                links: links            };        }                // Set up the SVG container        const width = window.innerWidth;        const height = window.innerHeight;                const svg = d3.select(\"#graph-container\")            .append(\"svg\")            .attr(\"width\", width)            .attr(\"height\", height);                // Add arrowhead marker definition        svg.append(\"defs\").append(\"marker\")            .attr(\"id\", \"arrowhead\")            .attr(\"viewBox\", \"0 -5 10 10\")            .attr(\"refX\", 20)            .attr(\"refY\", 0)            .attr(\"markerWidth\", 6)            .attr(\"markerHeight\", 6)            .attr(\"orient\", \"auto\")            .append(\"path\")            .attr(\"d\", \"M0,-5L10,0L0,5\")            .attr(\"fill\", \"#adb5bd\");                // Create a group for the graph that will be transformed for zooming        const g = svg.append(\"g\");                // Set up zoom behavior        const zoom = d3.zoom()            .scaleExtent([0.1, 4])            .on(\"zoom\", (event) => {                g.attr(\"transform\", event.transform);                // Hide popover when zooming                closePopover();            });                svg.call(zoom);                // Process the data        // const graphData = processData(sampleData);        const graphData = {            \"nodes\": [                {                \"id\": \"1\",                \"title\": \"Home Page\",                \"parentId\": null,                \"status\": \"Published\",                \"created\": \"2023-01-10\",                \"lastModified\": \"2023-04-01\",                \"views\": 12500,                \"x\": 160.3810881801417,                \"y\": 241.49175563767668,                \"children\": [                    \"2\",                    \"3\",                    \"4\"                ],                \"index\": 0,                \"vy\": 0,                \"vx\": 0,                \"fx\": -610,                \"fy\": 102                },                {                \"id\": \"2\",                \"title\": \"Products\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-15\",                \"lastModified\": \"2023-03-20\",                \"views\": 8750,                \"x\": 234.21713414452663,                \"y\": 203.9996885862305,                \"children\": [],                \"index\": 1,                \"vy\": 0,                \"vx\": 0,                \"fx\": -300,                \"fy\": -152                },                {                \"id\": \"3\",                \"title\": \"Services\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-15\",                \"lastModified\": \"2023-03-18\",                \"views\": 7300,                \"x\": 152.57869477016035,                \"y\": 139.69278572792626,                \"children\": [                ],                \"index\": 2,                \"vy\": 0,                \"vx\": 0,                \"fx\": 152.57869477016035,                \"fy\": 139.69278572792626                },                {                \"id\": \"4\",                \"title\": \"About Us\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-12\",                \"lastModified\": \"2023-02-28\",                \"views\": 5200,                \"x\": 492.61037418345535,                \"y\": 496.46783876381375,                \"children\": [                ],                \"index\": 3,                \"vy\": 0,                \"vx\": 0,                \"fx\": 492.61037418345535,                \"fy\": 496.46783876381375                }            ],            \"links\": [            {            \"source\": {                \"id\": \"1\",                \"title\": \"Home Page\",                \"parentId\": null,                \"status\": \"Published\",                \"created\": \"2023-01-10\",                \"lastModified\": \"2023-04-01\",                \"views\": 12500,                \"x\": 160.3810881801417,                \"y\": 241.49175563767668,                \"children\": [                \"2\",                \"3\",                \"4\"                ],                \"index\": 0,                \"vy\": 0,                \"vx\": 0,                \"fx\": 160.3810881801417,                \"fy\": 241.49175563767668            },            \"target\": {                \"id\": \"2\",                \"title\": \"Products\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-15\",                \"lastModified\": \"2023-03-20\",                \"views\": 8750,                \"x\": 234.21713414452663,                \"y\": 203.9996885862305,                \"children\": [                ],                \"index\": 1,                \"vy\": 0,                \"vx\": 0,                \"fx\": 234.21713414452663,                \"fy\": 203.9996885862305            },            \"index\": 0            },            {            \"source\": {                \"id\": \"1\",                \"title\": \"Home Page\",                \"parentId\": null,                \"status\": \"Published\",                \"created\": \"2023-01-10\",                \"lastModified\": \"2023-04-01\",                \"views\": 12500,                \"x\": 160.3810881801417,                \"y\": 241.49175563767668,                \"children\": [                \"2\",                \"3\",                \"4\"                ],                \"index\": 0,                \"vy\": 0,                \"vx\": 0,                \"fx\": 160.3810881801417,                \"fy\": 241.49175563767668            },            \"target\": {                \"id\": \"3\",                \"title\": \"Services\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-15\",                \"lastModified\": \"2023-03-18\",                \"views\": 7300,                \"x\": 152.57869477016035,                \"y\": 139.69278572792626,                \"children\": [                ],                \"index\": 2,                \"vy\": 0,                \"vx\": 0,                \"fx\": 152.57869477016035,                \"fy\": 139.69278572792626            },            \"index\": 1            },            {            \"source\": {                \"id\": \"1\",                \"title\": \"Home Page\",                \"parentId\": null,                \"status\": \"Published\",                \"created\": \"2023-01-10\",                \"lastModified\": \"2023-04-01\",                \"views\": 12500,                \"x\": 160.3810881801417,                \"y\": 241.49175563767668,                \"children\": [                \"2\",                \"3\",                \"4\"                ],                \"index\": 0,                \"vy\": 0,                \"vx\": 0,                \"fx\": 160.3810881801417,                \"fy\": 241.49175563767668            },            \"target\": {                \"id\": \"4\",                \"title\": \"About Us\",                \"parentId\": \"1\",                \"status\": \"Published\",                \"created\": \"2023-01-12\",                \"lastModified\": \"2023-02-28\",                \"views\": 5200,                \"x\": 492.61037418345535,                \"y\": 496.46783876381375,                \"children\": [                ],                \"index\": 3,                \"vy\": 0,                \"vx\": 0,                \"fx\": 492.61037418345535,                \"fy\": 496.46783876381375            },            \"index\": 2            }        ]        }                console.log(graphData)                // Create links        const link = g.selectAll(\".link\")            .data(graphData.links)            .enter()            .append(\"path\")            .attr(\"class\", \"link\");                // Define node color based on status        function getNodeColor(status) {            switch(status) {                case \"Published\": return \"#28a745\";                case \"Draft\": return \"#ffc107\";                case \"Archived\": return \"#6c757d\";                default: return \"#007bff\";            }        }                // Create nodes        const node = g.selectAll(\".node\")            .data(graphData.nodes)            .enter()            .append(\"g\")            .attr(\"class\", \"node\")            .attr(\"transform\", d => `translate(${d.x},${d.y})`)            .call(d3.drag()                .on(\"start\", dragStarted)                .on(\"drag\", dragged)                .on(\"end\", dragEnded))            .on(\"click\", showPopover);                // Add rectangles to nodes        node.append(\"rect\")            .attr(\"width\", d => Math.max(d.title.length * 8, 100))            .attr(\"height\", 200)            .attr(\"x\", d => -Math.max(d.title.length * 8, 100) / 2)            .attr(\"y\", -20)            .style(\"stroke\", d => getNodeColor(d.status));                // Add status indicator        node.append(\"circle\")            .attr(\"r\", 5)            .attr(\"cx\", d => Math.max(d.title.length * 8, 100) / 2 - 10)            .attr(\"cy\", -10)            .attr(\"fill\", d => getNodeColor(d.status));                // Add text to nodes        node.append(\"text\")            .text(d => d.title)            .attr(\"dy\", 5);                // Force simulation        const simulation = d3.forceSimulation(graphData.nodes)            .force(\"link\", d3.forceLink(graphData.links).id(d => d.id).distance(150))            .force(\"charge\", d3.forceManyBody().strength(-300))            .force(\"center\", d3.forceCenter(width / 2, height / 2))            .on(\"tick\", ticked)            .alphaDecay(0.028);                let simulationActive = true;                function toggleLayout() {            simulationActive = !simulationActive;            if (simulationActive) {                // Release fixed positions                graphData.nodes.forEach(node => {                    node.fx = null;                    node.fy = null;                });                simulation.alphaTarget(0.3).restart();                setTimeout(() => simulation.alphaTarget(0), 1000);            } else {                // Fix all nodes in current positions                graphData.nodes.forEach(node => {                    node.fx = node.x;                    node.fy = node.y;                });                simulation.alphaTarget(0);            }        }        function ticked() {            link.attr(\"d\", d => {                const sourceNode = graphData.nodes.find(node => node.id === d.source.id || node.id === d.source);                const targetNode = graphData.nodes.find(node => node.id === d.target.id || node.id === d.target);                                if (!sourceNode || !targetNode) return \"\";                                // Calculate rectangle dimensions                const sourceWidth = Math.max(sourceNode.title.length * 8, 100);                const sourceHeight = 40;                const targetWidth = Math.max(targetNode.title.length * 8, 100);                const targetHeight = 40;                                // Calculate path                const sourceX = sourceNode.x;                const sourceY = sourceNode.y;                const targetX = targetNode.x;                const targetY = targetNode.y;                                // Calculate direction vector                const dx = targetX - sourceX;                const dy = targetY - sourceY;                const angle = Math.atan2(dy, dx);                                // Calculate intersection points with rectangles                const sourceIntersectX = sourceX + Math.cos(angle) * (sourceWidth / 2);                const sourceIntersectY = sourceY + Math.sin(angle) * (sourceHeight / 2);                const targetIntersectX = targetX - Math.cos(angle) * (targetWidth / 2);                const targetIntersectY = targetY - Math.sin(angle) * (targetHeight / 2);                                return `M${sourceIntersectX},${sourceIntersectY} L${targetIntersectX},${targetIntersectY}`;            });                        node.attr(\"transform\", d => `translate(${d.x},${d.y})`);        }                // Drag functions        function dragStarted(event, d) {			console.log(event)            if (!event.active) simulation.alphaTarget(0.3).restart();            d.fx = d.x;            d.fy = d.y;            closePopover();        }                function dragged(event, d) {            d.fx = event.x;            d.fy = event.y;        }                function dragEnded(event, d) {            if (!event.active) simulation.alphaTarget(0);            // Don\'t reset position - this keeps the node where it was dragged            // d.fx = null;            // d.fy = null;        }                // Popover functionality        function showPopover(event, d) {            event.stopPropagation(); // Prevent triggering container clicks                        // Get parent node title if exists            let parentTitle = \"None\";            if (d.parentId) {                const parentNode = graphData.nodes.find(node => node.id === d.parentId);                if (parentNode) parentTitle = parentNode.title;            }                        // Update popover content            d3.select(\"#popover-title\").text(d.title);            d3.select(\"#popover-id\").text(d.id);            d3.select(\"#popover-parent\").text(parentTitle);            d3.select(\"#popover-children\").text(d.children.length);            d3.select(\"#popover-created\").text(d.created);            d3.select(\"#popover-status\").text(d.status);                        // Position and show popover            const popover = d3.select(\"#popover\");            popover                .style(\"left\", (event.pageX + 15) + \"px\")                .style(\"top\", (event.pageY - 15) + \"px\")                .classed(\"active\", true);                        // Close popover when clicking outside            document.addEventListener(\"click\", closePopoverOnClick);        }                function closePopoverOnClick(event) {            if (!event.target.closest(\"#popover\") && !event.target.closest(\".node\")) {                closePopover();            }        }                function closePopover() {            d3.select(\"#popover\").classed(\"active\", false);            document.removeEventListener(\"click\", closePopoverOnClick);        }                // Update node counter        function updateNodeCounter() {            d3.select(\"#node-count\").text(graphData.nodes.length);        }        updateNodeCounter();                // Control buttons        d3.select(\"#zoom-in\").on(\"click\", () => {            svg.transition().duration(300).call(zoom.scaleBy, 1.3);        });                d3.select(\"#zoom-out\").on(\"click\", () => {            svg.transition().duration(300).call(zoom.scaleBy, 0.7);        });                d3.select(\"#reset\").on(\"click\", () => {            svg.transition().duration(700).call(                zoom.transform,                d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)            );        });                // Toggle layout        d3.select(\"#toggle-layout\").on(\"click\", () => {            toggleLayout()        });                        // Add random node        d3.select(\"#add-node\").on(\"click\", () => {            // Generate random node            const parentIndex = Math.floor(Math.random() * graphData.nodes.length);            const parentNode = graphData.nodes[parentIndex];            const newId = (Math.max(...graphData.nodes.map(n => parseInt(n.id))) + 1).toString();                        const newNode = {                id: newId,                title: \"New Page \" + newId,                parentId: parentNode.id,                status: Math.random() > 0.3 ? \"Published\" : \"Draft\",                created: \"2023-04-13\",                lastModified: \"2023-04-13\",                views: 0,                x: parentNode.x + (Math.random() * 100 - 50),                y: parentNode.y + (Math.random() * 100 - 50),                children: []            };                        // Add to parent\'s children array            parentNode.children.push(newId);                        // Create new link            const newLink = {                source: parentNode.id,                target: newId            };                        // Add to data            graphData.nodes.push(newNode);            graphData.links.push(newLink);                        // Update simulation            simulation.nodes(graphData.nodes);            simulation.force(\"link\").links(graphData.links);                        // Update visualization            updateVisualization();                        // Restart simulation            simulation.alpha(1).restart();        });                function updateVisualization() {            // Update links            link = link.data(graphData.links);            link.exit().remove();            link = link.enter()                .append(\"path\")                .attr(\"class\", \"link\")                .merge(link);                        // Update nodes            node = node.data(graphData.nodes);            node.exit().remove();                        const nodeEnter = node.enter()                .append(\"g\")                .attr(\"class\", \"node\")                .attr(\"transform\", d => `translate(${d.x},${d.y})`)                .call(d3.drag()                    .on(\"start\", dragStarted)                    .on(\"drag\", dragged)                    .on(\"end\", dragEnded))                .on(\"click\", showPopover);                        nodeEnter.append(\"rect\")                .attr(\"width\", d => Math.max(d.title.length * 8, 100))                .attr(\"height\", 40)                .attr(\"x\", d => -Math.max(d.title.length * 8, 100) / 2)                .attr(\"y\", -20)                .style(\"stroke\", d => getNodeColor(d.status));                        nodeEnter.append(\"circle\")                .attr(\"r\", 5)                .attr(\"cx\", d => Math.max(d.title.length * 8, 100) / 2 - 10)                .attr(\"cy\", -10)                .attr(\"fill\", d => getNodeColor(d.status));                        nodeEnter.append(\"text\")                .text(d => d.title)                .attr(\"dy\", 5);                        node = nodeEnter.merge(node);                        // Update counter            updateNodeCounter();        }                // Initial view adjustment        svg.call(            zoom.transform,            d3.zoomIdentity.translate(width / 2, height / 2).scale(0.8)        );        toggleLayout()	",
				"AngularLocation": ""
			} 
		],
		"BeforeShow": [
		]
	},
	"Dependencies": [
	],
	"Imports": [
	],
	"Styles": [
	]
}